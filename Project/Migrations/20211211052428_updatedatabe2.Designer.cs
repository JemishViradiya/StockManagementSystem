// <auto-generated />
using System;
using Assignment.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Project.Migrations
{
    [DbContext(typeof(DatabaseConnection))]
    [Migration("20211211052428_updatedatabe2")]
    partial class updatedatabe2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Project.Models.Address", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("customerId")
                        .HasColumnType("int");

                    b.Property<string>("state")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("streetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("zipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(6)")
                        .HasMaxLength(6);

                    b.HasKey("id");

                    b.HasIndex("customerId")
                        .IsUnique();

                    b.ToTable("addresses");
                });

            modelBuilder.Entity("Project.Models.Customer", b =>
                {
                    b.Property<int>("customer_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("contact_number")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("customer_email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customer_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("payment_id")
                        .HasColumnType("int");

                    b.HasKey("customer_id");

                    b.HasIndex("payment_id");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("Project.Models.Fevourite", b =>
                {
                    b.Property<int>("fevourite_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("customer_id")
                        .HasColumnType("int");

                    b.Property<int?>("customer_id1")
                        .HasColumnType("int");

                    b.Property<int>("stock_id")
                        .HasColumnType("int");

                    b.HasKey("fevourite_id");

                    b.HasIndex("customer_id1");

                    b.ToTable("fevourites");
                });

            modelBuilder.Entity("Project.Models.Order", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("customerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("orderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<int>("stock_id")
                        .HasColumnType("int");

                    b.Property<int?>("stock_id1")
                        .HasColumnType("int");

                    b.Property<double>("totalAmount")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.HasIndex("customerId");

                    b.HasIndex("stock_id1");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("Project.Models.Payment", b =>
                {
                    b.Property<int>("payment_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("card_cvv")
                        .HasColumnType("int")
                        .HasMaxLength(3);

                    b.Property<string>("card_number")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("customer_id")
                        .HasColumnType("int");

                    b.Property<int?>("payment_id1")
                        .HasColumnType("int");

                    b.Property<string>("payment_type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("payment_id");

                    b.HasIndex("payment_id1");

                    b.ToTable("payments");
                });

            modelBuilder.Entity("Project.Models.Portfolio", b =>
                {
                    b.Property<int>("portfolio_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("client_id")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<int>("stock_id")
                        .HasColumnType("int");

                    b.HasKey("portfolio_id");

                    b.HasIndex("stock_id");

                    b.ToTable("portfolios");
                });

            modelBuilder.Entity("Project.Models.Stock", b =>
                {
                    b.Property<int>("stock_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("customer_id")
                        .HasColumnType("int");

                    b.Property<string>("stock_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("stock_price")
                        .HasColumnType("float");

                    b.Property<int>("stock_quantity")
                        .HasColumnType("int");

                    b.HasKey("stock_id");

                    b.HasIndex("customer_id");

                    b.ToTable("stocks");
                });

            modelBuilder.Entity("Project.Models.Address", b =>
                {
                    b.HasOne("Project.Models.Customer", "customer")
                        .WithOne("address")
                        .HasForeignKey("Project.Models.Address", "customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project.Models.Customer", b =>
                {
                    b.HasOne("Project.Models.Payment", "payment")
                        .WithMany()
                        .HasForeignKey("payment_id");
                });

            modelBuilder.Entity("Project.Models.Fevourite", b =>
                {
                    b.HasOne("Project.Models.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customer_id1");
                });

            modelBuilder.Entity("Project.Models.Order", b =>
                {
                    b.HasOne("Project.Models.Customer", "customer")
                        .WithMany("Orders")
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Models.Stock", "stock")
                        .WithMany()
                        .HasForeignKey("stock_id1");
                });

            modelBuilder.Entity("Project.Models.Payment", b =>
                {
                    b.HasOne("Project.Models.Payment", "payment")
                        .WithMany()
                        .HasForeignKey("payment_id1");
                });

            modelBuilder.Entity("Project.Models.Portfolio", b =>
                {
                    b.HasOne("Project.Models.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("stock_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project.Models.Stock", b =>
                {
                    b.HasOne("Project.Models.Customer", null)
                        .WithMany("stocks")
                        .HasForeignKey("customer_id");
                });
#pragma warning restore 612, 618
        }
    }
}
